# -*- coding: utf-8 -*-
"""XPath_JsonPath.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V97j6CUI1u8AHOU6IJkhF8JBLi-25xfa

Let's get the Menu from this week:
"""

import requests
mensaPlan = requests.get("https://fhnw.sv-restaurant.ch/de/menuplan/")

"""Now let's transform this unstructured text into an xml struture"""

from lxml import etree
from lxml import html
source_code = html.fromstring(mensaPlan.content)

"""Although structured we can only access the information in a very difficult way...

"""

obj1=source_code.body.getchildren()[4].getchildren()[0].getchildren()[1].getchildren()[0].getchildren()[0].getchildren()[0].getchildren()[0].getchildren()[0]
#show content
etree.tostring(obj1)

"""What are the class/instance methods from obj1?

"""

#show attribute and methods of the object obj1
dir(obj1)

#show the text context
obj1.text_content()

"""We can put that in a better structure and use xpath"""

mensaTree=etree.HTML(str(mensaPlan.content)[2:])

"""Use a xpath expression to get a Menu item (e.g. Purple Hit Beef Burger)"""

myXpathExpression = "" #TODO fill it
print([etree.tostring(tk) for tk in mensaTree.xpath(myXpathExpression)])

"""You can display the html in a nice way in a jupyter with following methods"""

import IPython
# you might need to access some items in the array like  mensaTree.xpath(myXpathExpression)[0]
# you also might need to check if it is a binary stream and then use .decode("utf-8")
IPython.display.HTML(etree.tostring(mensaTree.xpath(myXpathExpression).decode("utf-8")))

"""you can show the text content"""

mensaTree.xpath(myXpathExpression)[0][0][0][0].text

"""**JsonPath**


Let's get some real world json data and save into a dictionary
"""

import json

github_req = requests.get("https://api.github.com?callback=foo")

github = json.loads(github_req.content)

github["user_search_url"]

"""Usually json responses are also in form of list of json, as in the following example

"""

ggplot_req = requests.get("https://api.github.com/repos/hadley/ggplot2/issues")

"""For that we need to"""

!pip install jsonpath_ng

from jsonpath_ng import jsonpath, parse
import html

#ggplot_dics=html.unescape(str(ggplot_req.content)[2:-2]).decode('string_escape')
ggplot_dics=ggplot_req.content.decode('utf-8')

c1=2422
ggplot_dics[c1-15:c1+15]

ggplot  = {"content":json.loads(ggplot_dics)}

jsonpath_expression = parse('*..user.id')

for match in jsonpath_expression.find(ggplot):
    print(f'User id: {match.value}')

#TODO get author_association
jsonpath_expression = parse('')

for match in jsonpath_expression.find(ggplot):
    print(f'author_association: {match.value}')

ggplot

"""Nehmen wir andere Daten an, und versuchen wieder verschachtelte Angaben zu extrahieren."""

data="""[{
  "employees": [
    {
      "id": 1,
      "name": "Pankaj",
      "salary": "10000"
    },
    {
      "name": "David",
      "salary": "5000",
      "id": 2
    }
  ]
}]"""
json_data = json.loads(data)
print(json_data)

jsonpath_expression = parse('$..employees[*].id')

for match in jsonpath_expression.find(json_data):
    print(f'Employee id: {match.value}')

#todo print the names and salary from the employees (in multiple ways)