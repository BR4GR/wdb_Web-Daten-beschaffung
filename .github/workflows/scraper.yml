name: Run Scraper

on:
  schedule:
    - cron: "0 0 * * *"  # Runs daily at midnight
  workflow_dispatch:  # Allow manual runs

jobs:
  run-scraper:
    runs-on: ubuntu-latest

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      #----------------------------------------------
      #       Install Chrome
      #----------------------------------------------
      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction

      #----------------------------------------------
      #       Add IP to MongoDB Atlas
      #----------------------------------------------
      # Get the current runner's public IP address
      - name: Get public IP address
        run: |
          IP=$(curl https://ipinfo.io/ip)
          echo "PUBLIC_IP=$IP" >> $GITHUB_ENV

      # Debug: Print the JSON data
      - name: Print the JSON data
        run: |
          DATA=$(jq -n --arg ip "$PUBLIC_IP" --arg comment "My GitHub Action IP" '[{ipAddress: $ip, comment: $comment}]')
          echo "JSON Payload: $DATA"

      # Add the IP address to MongoDB Atlas via the API
      - name: Add GitHub runner IP to MongoDB Atlas
        run: |
          DATA=$(jq -n --arg ip "$PUBLIC_IP" --arg comment "My GitHub Action IP" '[{ipAddress: $ip, comment: $comment}]')
          echo "Sending this JSON payload: $DATA"
          curl -u "${{ secrets.MONGO_API_PUBLIC_KEY }}:${{ secrets.MONGO_API_PRIVATE_KEY }}" \
              --digest \
              -X POST \
              --header "Content-Type: application/json" \
              --data "$DATA" \
              "https://cloud.mongodb.com/api/atlas/v1.0/groups/${{ secrets.PROJECT_ID }}/accessList"


      #----------------------------------------------
      #       run the scraper
      #----------------------------------------------
      - name: Run scraper
        run: |
          source .venv/bin/activate
          poetry run python src/migros_scraper.py
        env:
          MONGO_URI: ${{ secrets.MONGODB_URI }}
          MONGO_DB_NAME: ${{ secrets.MONGO_DBNAME }}

      # Remove the IP address from MongoDB Atlas
      #----------------------------------------------
      #       Remove the IP address from MongoDB Atlas
      #----------------------------------------------
      - name: Get public IP address
        run: |
          IP=$(curl https://ipinfo.io/ip)

      - name: Delete GitHub runner IP from MongoDB Atlas
        run: |
          curl -u "${{ secrets.MONGO_API_PUBLIC_KEY }}:${{ secrets.MONGO_API_PRIVATE_KEY }}" \
              --digest \
              -X DELETE \
              "https://cloud.mongodb.com/api/atlas/v1.0/groups/${{ secrets.PROJECT_ID }}/accessList/$PUBLIC_IP"
